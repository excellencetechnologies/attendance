{"version":3,"sources":["components/workingHours/WorkingHoursSummary.jsx","redux/workingHours/actions/workingHoursSummary.js","modules/workingHours/containers/manageWorkingHours.jsx","components/generic/employeeMonthGrid/DaySection.jsx","components/generic/employeeMonthGrid/Day.jsx","redux/attendance/constants.js","components/generic/employeeMonthGrid/CalendarWeek.jsx","components/generic/employeeMonthGrid/CalendarStructure.jsx"],"names":["WorkingHoursSummary","_ref","workingHoursSummary","onWorkingHoursChange","onWorkingHoursSummary","_onChangeMonth","check","previousMonth","year","month","nextMonth","react_default","a","createElement","id","className","role","type","onClick","monthName","CalendarStructure","monthSummary","PropTypes","shape","array","isRequired","object","string","number","func","error_hours_summary","data","createAction","constants","get_working_hours_summary","dispatch","getState","Promise","resolve","reject","show_loading","fireAjax","action","async_get_working_hours_summary","then","json","hide_loading","error","update_day_working_hours","date","time","_","isEmpty","async_update_day_working_hours","monthYear","message","ManageWorkingHours","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onIsAlreadyLogin","state","defaultUserDisplay","daysummary_userid","daysummary_date","bind","assertThisInitialized","d","Date","getFullYear","getMonth","isNotValid","isNotUserValid","location","pathname","loggedUser","status","history","push","redirectTo","status_message","notify","hours","onUpdateDayWorkingHours","Menu","Header","pageTitle","showLoading","frontend","workingHours_WorkingHoursSummary","React","Component","VisibleManageWorkingHours","connect","toJS","logged_user","userLogin","userDaySummary","actions","actionsWorkingHoursSummary","RouterVisibleManageWorkingHours","withRouter","DaySection","block","classname","dataToDisplay","title","officeTime","content","concat","styles","timeInputBox","width","Day","dayData","forEmployeeHours","userid","day","showDaySummary","$","document","ready","timepicker","minTime","maxTime","timeFormat","step","officeWorkingHours","office_working_hours","main","_class","extraTimebg","datebg","workTimeData","total_time","extra_time_status","admin_alert","admin_alert_message","day_type","data-toggle","employeeMonthGrid_DaySection","style","onBlur","e","full_date","target","value","day_text","dataToDi","splay","data-target","in_time","out_time","extra_time","bool","text","CalendarWeek","userId","onShowDaySummary","setCalendarDay","calendarWidth","dayInRow","parseInt","dayWidth","css","window","on","dayHtml","employeeMonthGrid_Day","daysOfCalender","key","employeeMonthGrid_CalendarWeek"],"mappings":"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","file":"static/js/28.224cf85d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport CalendarStructure from '../../components/generic/employeeMonthGrid/CalendarStructure';\n\nconst WorkingHoursSummary = ({workingHoursSummary, onWorkingHoursChange, onWorkingHoursSummary}) => {\n  const _onChangeMonth = (check) => {\n    if (check === 'previous') {\n      onWorkingHoursSummary(workingHoursSummary.previousMonth.year, workingHoursSummary.previousMonth.month);\n    } else if (check === 'next') {\n      onWorkingHoursSummary(workingHoursSummary.nextMonth.year, workingHoursSummary.nextMonth.month);\n    }\n  };\n  return (\n    <div >\n      <div id=\"content\" className=\"app-content box-shadow-z0\" role=\"main\">\n        <div className=\"app-body\" id=\"view\">\n          <div>\n            <div className=\"fullcalendar fc fc-ltr fc-unthemed\">\n              <div className=\"fc-toolbar\">\n                <div className=\"fc-left\">\n                  <button type=\"button\" className=\"fc-prev-button fc-button fc-state-default fc-corner-left fc-corner-right\" onClick={() => _onChangeMonth('previous')}>\n                    <span className=\"fc-icon fc-icon-left-single-arrow\"></span>\n                  </button>\n                </div>\n                <div className=\"fc-right\">\n                  <button type=\"button\" className=\"fc-next-button fc-button fc-state-default fc-corner-left fc-corner-right\" onClick={() => _onChangeMonth('next')}>\n                    <span className=\"fc-icon fc-icon-right-single-arrow\"></span>\n                  </button>\n                </div>\n                <div className=\"fc-center\">\n                  <h2>{workingHoursSummary.monthName}-{workingHoursSummary.year}</h2>\n                </div>\n                <div className=\"fc-clear\"></div>\n              </div>\n              <br />\n              <div className=\"fc-view-container\">\n                <div className=\"fc-view fc-month-view fc-basic-view\">\n                  <div className=\"fc-body\">\n                    <div className=\"fc-widget-content\">\n                      <div className=\"fc-day-grid-container\">\n                        <div className=\"fc-day-grid\">\n                          <CalendarStructure month={workingHoursSummary.monthSummary} onWorkingHoursChange={onWorkingHoursChange} />\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nWorkingHoursSummary.PropTypes = {\n  workingHoursSummary: PropTypes.shape({\n    monthSummary:  PropTypes.array.isRequired,\n    previousMonth: PropTypes.object.isRequired,\n    nextMonth:     PropTypes.object.isRequired,\n    monthName:     PropTypes.string.isRequired,\n    year:          PropTypes.number.isRequired\n  }).isRequired,\n  onWorkingHoursChange:  PropTypes.func.isRequired,\n  onWorkingHoursSummary: PropTypes.func.isRequired\n};\n\nexport default WorkingHoursSummary;\n","import {createAction} from 'redux-actions';\nimport _ from 'lodash';\nimport {fireAjax} from '../../../services/index';\nimport * as constants from '../../../redux/constants';\nimport {show_loading, hide_loading} from '../../../redux/generic/actions/frontend';\n\nexport function success_hours_summary (data) {\n  return createAction(constants.ACTION_SUCCESS_HOURS_SUMMARY)(data);\n}\n\nexport function empty_hours_summary (data) {\n  return createAction(constants.ACTION_EMPTY_HOURS_SUMMARY)(data);\n}\n\nexport function error_hours_summary (data) {\n  return createAction(constants.ACTION_ERROR_HOURS_SUMMARY)(data);\n}\n\nfunction async_get_working_hours_summary (year, month) {\n  return fireAjax('POST', '', {\n    action: 'working_hours_summary',\n    year:   year,\n    month:  month\n  });\n}\n\nexport function get_working_hours_summary (year, month) {\n  return function (dispatch, getState) {\n    return new Promise((resolve, reject) => {\n      dispatch(show_loading());\n      async_get_working_hours_summary(year, month).then(\n        (json) => {\n          dispatch(hide_loading());\n          if (json.error === 0) {\n            dispatch(success_hours_summary(json.data));\n          } else {\n            dispatch(error_hours_summary({}));\n          }\n        }, (error) => {\n        dispatch(hide_loading());\n        dispatch(error_hours_summary({}));\n      }\n      );\n    });\n  };\n}\n\n// ----update day working timr\n\nexport function empty_update_hours_summary (data) {\n  return createAction(constants.ACTION_EMPTY_UPDATE_HOURS_SUMMARY)(data);\n}\n\nexport function error_update_hours_summary (data) {\n  return createAction(constants.ACTION_ERROR_UPDATE_HOURS_SUMMARY)(data);\n}\n\nfunction async_update_day_working_hours (date, time) {\n  return fireAjax('POST', '', {\n    action: 'update_day_working_hours',\n    date:   date,\n    time:   time\n  });\n}\n\nexport function update_day_working_hours (date, time) {\n  return function (dispatch, getState) {\n    if (_.isEmpty(date)) {\n      return Promise.reject('date is empty');\n    }\n    if (_.isEmpty(time)) {\n      return Promise.reject('time is empty');\n    }\n\n    return new Promise((resolve, reject) => {\n      dispatch(show_loading()); // show loading icon\n      async_update_day_working_hours(date, time).then(\n        (json) => {\n          dispatch(hide_loading()); // hide loading icon\n          if (json.error === 0) {\n// dispatch( success_hours_summary( json.data ) )\n            dispatch(get_working_hours_summary(json.data.monthYear.year, json.data.monthYear.month));\n          } else {\n// dispatch( error_hours_summary( {} ) )\n            dispatch(empty_update_hours_summary(json.data.message));\n// dispatch( get_working_hours_summary( json.data.monthYear.year, json.data.monthYear.month ) )\n          }\n        },\n        (error) => {\n          dispatch(hide_loading()); // hide loading icon\n          // dispatch( error_hours_summary( {}  ) )\n          dispatch(error_update_hours_summary(''));\n          // dispatch( get_working_hours_summary( json.data.monthYear.year, json.data.monthYear.month ) )\n        }\n      );\n    });\n  };\n}\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router';\nimport {notify} from '../../../services/notify';\nimport Menu from '../../../components/generic/Menu';\nimport {isNotUserValid} from '../../../services/generic';\nimport Header from '../../../components/generic/Header';\nimport WorkingHoursSummary from '../../../components/workingHours/WorkingHoursSummary';\nimport * as actions from '../../../redux/actions';\nimport * as actionsWorkingHoursSummary from '../../../redux/workingHours/actions/workingHoursSummary';\n\nclass ManageWorkingHours extends React.Component {\n  constructor (props) {\n    super(props);\n    this.props.onIsAlreadyLogin();\n    this.state = {\n      'defaultUserDisplay': '',\n      'daysummary_userid':  '',\n      'daysummary_date':    ''\n    };\n    this.onWorkingHoursChange = this.onWorkingHoursChange.bind(this);\n  }\n  componentWillMount () {\n    let d = new Date();\n    let year = d.getFullYear();\n    let month = d.getMonth() + 1;\n    this.props.onWorkingHoursSummary(year, month);\n  }\n  componentWillReceiveProps (props) {\n    let isNotValid = isNotUserValid(this.props.location.pathname, props.loggedUser);\n    if (isNotValid.status) {\n      this.props.history.push(isNotValid.redirectTo);\n    }\n    if (props.workingHoursSummary.status_message !== '') {\n      notify(props.workingHoursSummary.status_message);\n    }\n  }\n  onWorkingHoursChange (date, hours) {\n    if (hours !== '') {\n      this.props.onUpdateDayWorkingHours(date, hours).then((data) => {}, (error) => {\n        notify(error);\n      });\n    }\n  }\n  render () {\n    return (\n      <div>\n        <Menu {...this.props} />\n        <div id=\"content\" className=\"app-content box-shadow-z0\" role=\"main\" >\n          <Header pageTitle={'Manage Working Hours'} showLoading={this.props.frontend.show_loading} />\n          <div className=\"app-body\" id=\"view\">\n            <div className=\"padding\">\n              <div className=\"row\">\n                <div className=\"col-md-12\">\n                  <WorkingHoursSummary workingHoursSummary={this.props.workingHoursSummary} onWorkingHoursChange={this.onWorkingHoursChange} onWorkingHoursSummary={this.props.onWorkingHoursSummary} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps (state) {\n  return {\n    frontend:            state.frontend.toJS(),\n    loggedUser:          state.logged_user.userLogin,\n    userDaySummary:      state.userDaySummary.toJS(),\n    workingHoursSummary: state.workingHoursSummary.toJS()\n  };\n}\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onIsAlreadyLogin: () => {\n      return dispatch(actions.isAlreadyLogin());\n    },\n    onWorkingHoursSummary: (year, month) => {\n      return dispatch(actionsWorkingHoursSummary.get_working_hours_summary(year, month));\n    },\n    onUpdateDayWorkingHours: (date, time) => {\n      return dispatch(actionsWorkingHoursSummary.update_day_working_hours(date, time));\n    }\n  };\n};\n\nconst VisibleManageWorkingHours = connect(mapStateToProps, mapDispatchToProps)(ManageWorkingHours);\n\nconst RouterVisibleManageWorkingHours = withRouter(VisibleManageWorkingHours);\n\nexport default RouterVisibleManageWorkingHours;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst DaySection = ({block, classname, dataToDisplay, time, title, officeTime}) => {\n  let content = '';\n  if (block === 'type1') {\n    content = <span>\n      <span className=\"fc-time\">{time}</span>\n      <span className=\"fc-title\">{title}{officeTime ? <i className=\"officetime\" >{`- ${officeTime} hrs`}</i> : ''}</span>\n    </span>;\n  } else if (block === 'type2') {\n    content = dataToDisplay;\n  }\n  return (\n    <div className={classname}>\n      <div className=\"fc-content\">\n        {content}\n      </div>\n    </div>\n  );\n};\n\nDaySection.PropTypes = {\n  block:         PropTypes.string.isRequired,\n  classname:     PropTypes.string.isRequired,\n  dataToDisplay: PropTypes.string.isRequired,\n  time:          PropTypes.string.isRequired,\n  title:         PropTypes.string.isRequired\n};\n\nexport default DaySection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport $ from 'jquery';\nimport * as dayType from '../../../redux/attendance/constants';\nimport DaySection from './DaySection';\n\nconst styles = {\n  timeInputBox: {\n    'width': '40px'\n  }\n};\n\nconst Day = ({dayData, classname, forEmployeeHours, day, userid, showDaySummary, onWorkingHoursChange}) => {\n  $(document).ready(function () {\n    $('input.timepicker').timepicker({'minTime': '5:00', 'maxTime': '12:00', 'timeFormat': 'h:i', 'step': 10});\n  });\n\n  let d = dayData;\n  let officeWorkingHours = d.office_working_hours;\n  let main = '';\n  let _class = 'fc-day-grid-event fc-h-event fc-event fc-start fc-end fc-draggable ';\n\n  let extraTimebg = '';\n  let date = d.date;\n  let datebg = 'dark-white';\n  let workTimeData = d.total_time + ' - Total Work Time';\n\n  if (d.extra_time_status === '-') {\n    extraTimebg = 'red';\n  } else if (d.extra_time_status === '+') {\n    extraTimebg = 'green';\n  }\n  if (d.admin_alert === 1) {\n    date = date + ' * ';\n    datebg = 'indigo';\n    workTimeData = d.admin_alert_message;\n  }\n  if (!forEmployeeHours && d.day_type === dayType.WORKING_DAY) {\n    main = <div data-toggle=\"modal\" data-target=\"#modalUserDaySummary\" onClick={() => showDaySummary(userid, dayData.full_date)}>\n      <DaySection classname={_class + datebg} block=\"type1\" time={<h5>{date}</h5>} title={d.day} officeTime={d.office_working_hours} />\n      <DaySection classname={_class + 'dark-white'} block=\"type1\" time={d.in_time + ' - ' + d.out_time} title='' />\n      <DaySection classname={_class + 'dark-white center'} block=\"type2\" dataToDisplay={workTimeData} />\n      <DaySection classname={_class + extraTimebg} block=\"type1\" time={d.extra_time} title='' />\n    </div>;\n  } else if (!forEmployeeHours && d.day_type === dayType.NON_WORKING_DAY) {\n    main = <div>\n      <DaySection classname={_class + 'yellow'} block=\"type1\" time={<h5>{d.date}</h5>} title={d.day} />\n      <DaySection classname={_class + 'yellow'} block=\"type1\" time={'Non Working day'} />\n      <DaySection classname={_class + 'yellow'} block=\"type1\" time={d.day_text} />\n    </div>;\n  } else if (!forEmployeeHours && d.day_type === dayType.FUTURE_WORKING_DAY) {\n    main = <div>\n      <DaySection classname={_class + 'dark-white'} block=\"type1\" time={<h5>{d.date}</h5>} title={d.day} officeTime={d.office_working_hours} />\n      <DaySection classname={_class + 'dark-white'} block=\"type1\" time='' title='' />\n      <DaySection classname={_class + 'dark-white'} block=\"type1\" dataToDi splay={d.day_text} />\n      <DaySection classname={_class + 'dark-white center'} block=\"type2\" dataToDisplay={workTimeData} />\n    </div>;\n  } else if (!forEmployeeHours && d.day_type === dayType.LEAVE_DAY) {\n    main = <div>\n      <DaySection classname={_class + 'red'} block=\"type1\" time={<h5>{d.date}</h5>} title={d.day} officeTime={d.office_working_hours} />\n      <DaySection classname={_class + 'red'} block=\"type1\" time={'On Leave'} title='' />\n      <DaySection classname={_class + 'red'} block=\"type1\" time={d.day_text} title='' />\n    </div>;\n  } else if (!forEmployeeHours && d.day_type === dayType.HALF_DAY) {\n    main = <div>\n      <DaySection classname={_class + 'red-100'} block=\"type1\" time={<h5>{d.date}</h5>} title={d.day} officeTime={d.office_working_hours} />\n      <DaySection classname={_class + 'red-100'} block=\"type1\" time={'Half day'} title='' />\n      <DaySection classname={_class + 'red-100'} block=\"type1\" time={d.day_text} title='' />\n    </div>;\n  } else if (forEmployeeHours && d.day_type === dayType.WORKING_DAY) {\n    main = <div data-toggle=\"modal\">\n      <DaySection classname={_class + 'dark-white'} block=\"type1\" time={<h5>{d.date}</h5>} title={d.day} officeTime={d.office_working_hours} />\n      <DaySection classname={_class + 'dark-white'} block=\"type1\" time={<h6>Hours : {officeWorkingHours}</h6>} title='' />\n\n      <div className=\"fc-day-grid-event fc-h-event fc-event fc-start fc-end dark-white fc-draggable\">\n        <div className=\"fc-content\">\n          <span className=\"fc-title\">\n            Change to &nbsp;:&nbsp;\n          </span>\n          <span className=\"fc-time\">\n            <input type=\"text\" className=\"timepicker\" style={styles.timeInputBox} onBlur={(e) => onWorkingHoursChange(dayData.full_date, e.target.value)} />\n          </span>\n        </div>\n      </div>\n\n    </div>;\n  } else if (forEmployeeHours && d.day_type === dayType.NON_WORKING_DAY) {\n    main = <div>\n      <DaySection classname={_class + 'yellow'} block=\"type1\" time={<h5>{d.date}</h5>} title={d.day} />\n      <DaySection classname={_class + 'yellow'} block=\"type1\" time={'Non Working day'} />\n      <DaySection classname={_class + 'yellow'} block=\"type1\" time={d.day_text} title='' />\n\n      <div className=\"fc-day-grid-event fc-h-event fc-event fc-start fc-end dark-white fc-draggable\">\n        <div className=\"fc-content\">\n          <span className=\"fc-title\">\n            Change to &nbsp;:&nbsp;\n          </span>\n          <span className=\"fc-time\">\n            <input type=\"text\" className=\"timepicker\" style={styles.timeInputBox} onBlur={(e) => onWorkingHoursChange(dayData.full_date, e.target.value)} />\n          </span>\n        </div>\n      </div>\n    </div>;\n  }\n\n  return (\n    <div>\n      {main}\n    </div>\n  );\n};\n\nDay.PropTypes = {\n  classname:            PropTypes.string,\n  forEmployeeHours:     PropTypes.bool,\n  day:                  PropTypes.string,\n  userid:               PropTypes.number,\n  showDaySummary:       PropTypes.func,\n  onWorkingHoursChange: PropTypes.func,\n  dayData:              PropTypes.shape({\n    date:                 PropTypes.number.isRequired,\n    day:                  PropTypes.string.isRequired,\n    day_type:             PropTypes.string.isRequired,\n    full_date:            PropTypes.string.isRequired,\n    admin_alert:          PropTypes.number,\n    admin_alert_message:  PropTypes.string,\n    day_text:             PropTypes.string,\n    extra_time:           PropTypes.string,\n    in_time:              PropTypes.string,\n    out_time:             PropTypes.string,\n    total_time:           PropTypes.string,\n    office_working_hours: PropTypes.string,\n    text:                 PropTypes.string\n  }).isRequired\n};\n\nexport default Day;\n","export const HALF_DAY = 'HALF_DAY';\nexport const LEAVE_DAY = 'LEAVE_DAY';\nexport const WORKING_DAY = 'WORKING_DAY';\nexport const NON_WORKING_DAY = 'NON_WORKING_DAY';\nexport const FUTURE_WORKING_DAY = 'FUTURE_WORKING_DAY';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport $ from 'jquery';\nimport Day from './Day';\n\nconst CalendarWeek = ({userId, dayData, onShowDaySummary, onWorkingHoursChange}) => {\n  const setCalendarDay = () => {\n    let calendarWidth = $('#calendar').width();\n    let dayInRow = parseInt(calendarWidth / 100);\n    if (dayInRow < 7 && calendarWidth % 100 > 0) {\n      let dayWidth = parseInt(calendarWidth / dayInRow);\n      $('#calendar .calendar-day').css({width: dayWidth + 'px'});\n    } else if (dayInRow >= 7) {\n      $('#calendar .calendar-day').css({width: calendarWidth / 7 + 'px'});\n    }\n  };\n  $(document).ready(function () {\n    $(window).on('resize', function () {\n      setCalendarDay();\n    });\n    setCalendarDay();\n  });\n  let dayHtml = '';\n  if (userId) {\n    dayHtml = <Day forEmployeeHours={false} dayData={dayData} showDaySummary={onShowDaySummary} userid={userId} />;\n  } else {\n    dayHtml = <Day forEmployeeHours dayData={dayData} onWorkingHoursChange={onWorkingHoursChange} />;\n  }\n  return (\n    <div id=\"calendarDay\" className=\"calendar-day\" >\n      <div className=\"fc-event-container\" id={`${dayData.full_date}`} >\n        {dayHtml}\n      </div>\n    </div>\n  );\n};\n\nCalendarWeek.PropTypes = {\n  dayData:              PropTypes.object.isRequired,\n  userId:               PropTypes.number,\n  onShowDaySummary:     PropTypes.func,\n  onWorkingHoursChange: PropTypes.func\n};\n\nexport default CalendarWeek;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport CalendarWeek from './CalendarWeek';\n\nconst CalendarStructure = ({userId, month, onShowDaySummary, onWorkingHoursChange}) => {\n  let daysOfCalender = _.map(month, (dayData, key) => {\n    return <CalendarWeek key={key} userId={userId} dayData={dayData} onShowDaySummary={onShowDaySummary} onWorkingHoursChange={onWorkingHoursChange} />;\n  });\n  return (\n    <div id=\"calendar\" className=\"col-xs-12\">\n      {daysOfCalender}\n    </div>\n  );\n};\n\nCalendarStructure.PropTypes = {\n  userId:           PropTypes.number.isRequired,\n  month:            PropTypes.array.isRequired,\n  onShowDaySummary: PropTypes.func.isRequired\n};\n\nexport default CalendarStructure;\n"],"sourceRoot":""}